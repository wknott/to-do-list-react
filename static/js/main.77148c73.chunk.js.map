{"version":3,"sources":["features/tasks/TaskList/done.svg","features/tasks/TaskList/delete.svg","common/Header/index.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","store.js","GlobalStyle.js","index.js","theme.js"],"names":["module","exports","Header","title","StyledForm","styled","form","theme","breakpoints","mobileMax","Input","input","colors","secondary","Button","button","primary","tasksSlice","createSlice","name","initialState","tasks","JSON","parse","localStorage","getItem","hideDoneTasks","directionOfSort","reducers","addTask","payload","push","removeTask","state","filter","task","id","toggleTaskDone","map","done","toggleHideDoneTasks","markAllTasksAsDone","sortTasks","sort","a","b","localeCompare","actions","selectTasks","Form","useState","newTaskName","setNewTaskName","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","nameWithoutWhitespace","trim","nanoid","current","focus","value","placeholder","autoFocus","onChange","target","ref","ButtonsContainer","div","Buttons","useSelector","length","onClick","disabled","every","List","ul","Item","li","hide","css","ToggleDoneButton","DeleteButton","Content","p","TaskList","key","height","src","doneImage","alt","deleteImage","StyledSection","section","SectionHeader","header","Title","h2","Section","extraHeaderContent","sectionBody","ContainerMain","main","Container","children","Tasks","Boolean","window","location","hostname","match","store","configureStore","reducer","tasksReducer","subscribe","setItem","stringify","getState","GlobalStyle","createGlobalStyle","text","background","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77148c73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/done.8768eed0.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.889d8b6f.svg\";","import React from 'react';\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>\r\n      {title}\r\n    </h1>\r\n  </header>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 10px;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 10px;\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  color: white;\r\n  border: none;\r\n  transition: background 0.3s, transform 0.3s;\r\n  \r\n  &:hover {\r\n    filter: brightness(115%);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(130%);\r\n  }\r\n\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: JSON.parse(localStorage.getItem(\"tasks\")) || [],\r\n    hideDoneTasks: false,\r\n    directionOfSort: null,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    removeTask: (state, { payload }) => {\r\n      state.tasks = state.tasks.filter(task => task.id !== payload.id)\r\n    },\r\n    toggleTaskDone: (state, { payload }) => {\r\n      state.tasks = state.tasks.map(task => {\r\n        return task.id === payload.id ? ({\r\n          ...task,\r\n          done: !task.done\r\n        }) : (task);\r\n      })\r\n    },\r\n    toggleHideDoneTasks: state => {\r\n      state.hideDoneTasks = !state.hideDoneTasks;\r\n    },\r\n    markAllTasksAsDone: state => {\r\n      state.tasks = state.tasks.map(task => ({\r\n        ...task,\r\n        done: true,\r\n      }))\r\n    },\r\n    sortTasks: state => {\r\n      state.directionOfSort = state.directionOfSort === \"asc\" ? \"desc\" : \"asc\";\r\n      state.tasks = state.tasks.sort(\r\n        (a, b) => state.directionOfSort === \"asc\" ? b.name.localeCompare(a.name) : a.name.localeCompare(b.name)\r\n      )\r\n    },\r\n  }\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  removeTask,\r\n  toggleTaskDone,\r\n  toggleHideDoneTasks,\r\n  markAllTasksAsDone,\r\n  sortTasks\r\n} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const [newTaskName, setNewTaskName] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  }\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const nameWithoutWhitespace = newTaskName.trim();\r\n    if (nameWithoutWhitespace) {\r\n      dispatch(addTask({\r\n        name: nameWithoutWhitespace,\r\n        done: false,\r\n        id: nanoid(),\r\n      }));\r\n      setNewTaskName(\"\");\r\n    }\r\n    focusInput();\r\n  }\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskName}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        autoFocus\r\n        onChange={({ target }) => setNewTaskName(target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  )\r\n}\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n    display: grid;\r\n    grid-gap: 20px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 0 10px;\r\n  border: none;\r\n  background-color: transparent;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  transition: 0.5s;\r\n\r\n  &:hover {\r\n    filter: brightness(115%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.colors.secondary};\r\n  }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonsContainer, Button } from \"./styled\";\r\nimport { selectTasks, toggleHideDoneTasks, markAllTasksAsDone, sortTasks } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDoneTasks, directionOfSort } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ButtonsContainer>\r\n      {tasks.length > 0 &&\r\n        <>\r\n          <Button onClick={() => dispatch(sortTasks())}>\r\n            Posortuj zadania {directionOfSort === null ? \"\" : directionOfSort === \"asc\" ? \"↓\" : \"↑\"}\r\n          </Button>\r\n          <Button onClick={() => dispatch(toggleHideDoneTasks())}>\r\n            {hideDoneTasks ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(markAllTasksAsDone())}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      }\r\n    </ButtonsContainer >\r\n  )\r\n}\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style-type: none;\r\n  padding: 20px;\r\n  margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  padding: 5px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.secondary};\r\n  display: flex;\r\n  align-items: center;\r\n  \r\n  ${({ hide }) => hide && css`\r\n    display: none;\r\n  `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  padding: 10px;\r\n  height: 35px;\r\n  flex: 0 0 35px;\r\n  transition: 0.5s;\r\n`;\r\n\r\nexport const ToggleDoneButton = styled(Button)`\r\n  background-color: hsl(120, 100%, 25%);\r\n\r\n  &:hover {\r\n    background-color: hsl(120, 100%, 30%);\r\n  }\r\n\r\n  &:active {\r\n    background-color: hsl(120, 100%, 35%);\r\n  }\r\n`;\r\n\r\nexport const DeleteButton = styled(Button)`\r\n  background-color: hsl(0, 100%, 50%);\r\n\r\n  &:hover {\r\n    background-color: hsl(0, 100%, 60%);\r\n  }\r\n\r\n  &:active {\r\n    background-color: hsl(0, 100%, 70%);\r\n  }\r\n`;\r\n\r\nexport const Content = styled.p`\r\n  padding: 5px 10px;\r\n  margin: 0px;\r\n  flex-grow: 1;\r\n`;","import React from \"react\";\r\nimport { List, Item, ToggleDoneButton, DeleteButton, Content } from \"./styled\";\r\nimport doneImage from \"./done.svg\";\r\nimport deleteImage from \"./delete.svg\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, removeTask, toggleTaskDone } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDoneTasks } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(({ id, name, done }) => (\r\n        <Item\r\n          key={id}\r\n          hide={hideDoneTasks && done}\r\n        >\r\n          <ToggleDoneButton onClick={() => dispatch(toggleTaskDone({ id }))}>\r\n            {done && <img height={15} src={doneImage} alt=\"done\" />}\r\n          </ToggleDoneButton>\r\n          <Content>\r\n            {done ? <s>{name}</s> : name}\r\n          </Content>\r\n          <DeleteButton onClick={() => dispatch(removeTask({ id }))}>\r\n            <img height={15} src={deleteImage} alt=\"delete\" />\r\n          </DeleteButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  background-color: white;\r\n  margin-bottom: 10px;\r\n  box-shadow: 0px 0px 2px 2px solid ${({ theme }) => theme.colors.secondary};\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.secondary};\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 10px;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  font-size: 20px;\r\n  margin: 0;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledSection, SectionHeader, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, sectionBody }) => (\r\n  <StyledSection>\r\n    <SectionHeader>\r\n      <Title>\r\n        {title}\r\n      </Title>\r\n      {extraHeaderContent}\r\n    </SectionHeader>\r\n    {sectionBody}\r\n  </StyledSection>\r\n)\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const ContainerMain = styled.main`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;","import React from \"react\";\r\nimport { ContainerMain } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <ContainerMain>\r\n    {children}\r\n  </ContainerMain>\r\n)\r\n\r\nexport default Container;","import React from \"react\";\nimport Header from \"../../common/Header\";\nimport Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport TaskList from \"./TaskList\";\nimport Section from \"../../common/Section\";\nimport Container from \"../../common/Container\";\n\n\nconst Tasks = () => (\n  <Container>\n    <Header title=\"Lista zadań\" />\n    <Section\n      title=\"Dodaj nowe zadanie\"\n      sectionBody={<Form />}\n    />\n    <Section\n      title=\"Lista zadań\"\n      extraHeaderContent={<Buttons />}\n      sectionBody={<TaskList />}\n    />\n  </Container>\n);\n\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"tasks\", JSON.stringify(store.getState().tasks.tasks))\r\n})\r\nexport default store;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Lato\", sans-serif;\r\n    color: ${({ theme }) => theme.colors.text};\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n  }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { defaultTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={defaultTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const defaultTheme = {\r\n  colors: {\r\n    primary: \"royalblue\",\r\n    secondary: \"#ddd\",\r\n    text: \"#222\",\r\n    background: \"#eee\",\r\n  },\r\n  breakpoints: {\r\n    mobileMax: 767,\r\n  }\r\n};"],"sourceRoot":""}