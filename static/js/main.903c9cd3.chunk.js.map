{"version":3,"sources":["Tasks/done.svg","Tasks/delete.svg","Header/index.js","Form/index.js","Buttons/index.js","Tasks/index.js","Section/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","title","Form","addTask","useState","newTaskName","setNewTaskName","onSubmit","event","preventDefault","nameWithoutWhitespace","trim","className","value","placeholder","autoFocus","onChange","target","Buttons","directionOfSort","hideDoneTasks","tasks","length","disabled","every","done","Tasks","removeTask","map","id","name","key","height","src","doneImage","alt","onClick","deleteImage","Section","extraHeaderContent","sectionBody","Container","children","App","setTasks","filter","task","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.903c9cd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/done.8768eed0.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.889d8b6f.svg\";","import React from 'react';\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>\r\n      {title}\r\n    </h1>\r\n  </header>\r\n)\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Form = ({ addTask }) => {\r\n  const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const nameWithoutWhitespace = newTaskName.trim();\r\n    if (nameWithoutWhitespace) {\r\n      addTask(nameWithoutWhitespace);\r\n      setNewTaskName(\"\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onFormSubmit} className=\"form\">\r\n      <input\r\n        value={newTaskName}\r\n        className=\"form__input\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        autoFocus\r\n        onChange={({ target }) => setNewTaskName(target.value)}\r\n      />\r\n      <button className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Buttons = ({ directionOfSort, hideDoneTasks, tasks }) => (\r\n  <div className=\"buttons\">\r\n    {tasks.length > 0 &&\r\n      <>\r\n        <button className=\"buttons__button\">\r\n          Posortuj zadania {directionOfSort === null ? \"\" : directionOfSort === \"asc\" ? \"↓\" : \"↑\"}\r\n        </button>\r\n        <button className=\"buttons__button\">\r\n          {hideDoneTasks ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n        </button>\r\n        <button className=\"buttons__button\" disabled={tasks.every(({ done }) => done)}>\r\n          Ukończ wszystkie\r\n        </button>\r\n      </>\r\n    }\r\n  </div>\r\n)\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport doneImage from \"./done.svg\";\r\nimport deleteImage from \"./delete.svg\";\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks, removeTask }) => (\r\n  <ul className=\"list\">\r\n    {tasks.map(({ id, name, done }) => (\r\n      <li\r\n        key={id}\r\n        className={`list__item${hideDoneTasks && done ? \" list__item--hide\" : \"\"}`}\r\n      >\r\n        <button className=\"list__button list__button--done\">\r\n          {done && <img height={15} src={doneImage} alt=\"done\" />}\r\n        </button>\r\n        <p className=\"list__paragraph\">\r\n          {done ? <s>{name}</s> : name}\r\n        </p>\r\n        <button\r\n          className=\"list__button list__button--remove \"\r\n          onClick={() => removeTask(id)}\r\n        >\r\n          <img height={15} src={deleteImage} alt=\"delete\" />\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul >\r\n)\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Section = ({ title, extraHeaderContent, sectionBody }) => (\r\n  <section className=\"section\">\r\n    <header className=\"section__header\">\r\n      <h2 className=\"section__title\">\r\n        {title}\r\n      </h2>\r\n      {extraHeaderContent}\r\n    </header>\r\n    {sectionBody}\r\n  </section>\r\n)\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Container = ({ children }) => (\r\n  <main className=\"container\">\r\n    {children}\r\n  </main>\r\n)\r\n\r\nexport default Container;","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport Tasks from \"./Tasks\";\nimport Section from \"./Section\";\nimport Container from \"./Container\";\n\nconst directionOfSort = null;\nconst hideDoneTasks = false;\n\nconst App = () => {\n  const [tasks, setTasks] = useState([\n    { id: 1, name: \"Dodać interakcję do aplikacji\", done: false },\n    { id: 2, name: \"Przenieść aplikację do React.js\", done: true },\n  ]);\n\n  const addTask = (name) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n        name,\n        done: false,\n      }\n    ]);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id))\n  }\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        sectionBody={<Form addTask={addTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={\n          <Buttons\n            directionOfSort={directionOfSort}\n            hideDoneTasks={hideDoneTasks}\n            tasks={tasks}\n          />\n        }\n        sectionBody={\n          <Tasks\n            tasks={tasks}\n            hideDoneTasks={hideDoneTasks}\n            removeTask={removeTask}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}