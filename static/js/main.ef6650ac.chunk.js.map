{"version":3,"sources":["features/tasks/TasksPage/TaskList/done.svg","features/tasks/TasksPage/TaskList/delete.svg","common/Header/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Input/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/queryParameters.js","routes.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/searchQueryParamName.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/author/AuthorPage.js","Navigation/styled.js","Navigation/index.js","features/tasks/TaskPage/index.js","App.js","serviceWorker.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","GlobalStyle.js","index.js","theme.js"],"names":["module","exports","Header","title","StyledForm","styled","form","theme","breakpoints","mobileMax","Button","button","colors","primary","input","secondary","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDoneTasks","sortDirection","loading","reducers","addTask","task","payload","push","removeTask","taskId","removeTaskIndex","findIndex","id","splice","toggleTaskDone","indexToggleTaskDone","done","toggleHideDoneTasks","state","markAllTasksAsDone","forEach","toggleSortDirection","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectLoading","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","contentWithoutWhitespace","trim","content","nanoid","current","focus","Input","value","placeholder","autoFocus","onChange","target","ref","ButtonsContainer","div","Buttons","useSelector","length","onClick","disabled","every","List","ul","Item","li","hide","css","ToggleDoneButton","DeleteButton","Content","p","StyledLink","Link","useQueryParameter","searchQueryParamName","location","useLocation","URLSearchParams","search","get","toTask","TaskList","query","filter","toUpperCase","includes","selectTasksByQuery","sortedTasks","sort","a","b","localeCompare","map","key","height","src","doneImage","alt","to","deleteImage","StyledSection","section","SectionHeader","header","Title","h2","SectionBody","Section","extraHeaderContent","sectionBody","ContainerMain","main","Container","children","ExampleTasksButton","Wrapper","Search","replaceQueryParameter","searchParams","history","useHistory","set","delete","pathname","toString","useReplaceQueryParameter","undefined","Tasks","AuthorPage","NavLink","attrs","activeClassName","StyledNav","nav","Navigation","TaskPage","useParams","find","getTaskById","path","TasksPage","Boolean","window","hostname","match","getExampleTasks","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExamlpeTasks","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","GlobalStyle","createGlobalStyle","text","background","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef6650ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/done.8768eed0.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.889d8b6f.svg\";","import React from 'react';\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>\r\n      {title}\r\n    </h1>\r\n  </header>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 10px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 10px;\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  color: white;\r\n  border: none;\r\n  transition: background 0.3s, transform 0.3s;\r\n  \r\n  &:hover {\r\n    filter: brightness(115%);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(130%);\r\n  }\r\n\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n  padding: 10px;\r\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDoneTasks: false,\r\n    sortDirection: null,\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const removeTaskIndex = tasks.findIndex(task => task.id === taskId);\r\n      tasks.splice(removeTaskIndex, 1);\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const indexToggleTaskDone = tasks.findIndex(task => task.id === taskId);\r\n      tasks[indexToggleTaskDone].done = !tasks[indexToggleTaskDone].done;\r\n    },\r\n    toggleHideDoneTasks: state => {\r\n      state.hideDoneTasks = !state.hideDoneTasks;\r\n    },\r\n    markAllTasksAsDone: state => {\r\n      state.tasks.forEach(task => task.done = true);\r\n    },\r\n    toggleSortDirection: state => {\r\n      state.sortDirection = state.sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n    },\r\n    fetchExampleTasks: state => {\r\n      state.loading = true;\r\n    },\r\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n      state.loading = false;\r\n    },\r\n    fetchExampleTasksError: state => {\r\n      state.loading = false;\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  removeTask,\r\n  toggleTaskDone,\r\n  toggleHideDoneTasks,\r\n  markAllTasksAsDone,\r\n  toggleSortDirection,\r\n  fetchExampleTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\n\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Button } from \"./styled\";\r\nimport Input from \"../Input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  }\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const contentWithoutWhitespace = newTaskContent.trim();\r\n    if (contentWithoutWhitespace) {\r\n      dispatch(addTask({\r\n        content: contentWithoutWhitespace,\r\n        done: false,\r\n        id: nanoid(),\r\n      }));\r\n      setNewTaskContent(\"\");\r\n    }\r\n    focusInput();\r\n  }\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        autoFocus\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  )\r\n}\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n    display: grid;\r\n    grid-gap: 20px;\r\n  }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\n  padding: 0 10px;\r\n  border: none;\r\n  background-color: transparent;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  transition: 0.5s;\r\n\r\n  &:hover {\r\n    filter: brightness(115%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(130%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.colors.secondary};\r\n    &:hover {\r\n      filter: none;\r\n    }\r\n\r\n    &:active {\r\n      filter: none;\r\n    }\r\n  }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonsContainer } from \"./styled\";\r\nimport Button from \"../Button/\"\r\nimport {\r\n  selectTasksState,\r\n  toggleHideDoneTasks,\r\n  markAllTasksAsDone,\r\n  toggleSortDirection,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDoneTasks, sortDirection } = useSelector(selectTasksState);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ButtonsContainer>\r\n      {tasks.length > 0 &&\r\n        <>\r\n          <Button onClick={() => dispatch(toggleSortDirection())}>\r\n            Posortuj zadania {sortDirection === null ? \"\" : sortDirection === \"asc\" ? \"↑\" : \"↓\"}\r\n          </Button>\r\n          <Button onClick={() => dispatch(toggleHideDoneTasks())}>\r\n            {hideDoneTasks ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(markAllTasksAsDone())}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      }\r\n    </ButtonsContainer >\r\n  )\r\n}\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n  list-style-type: none;\r\n  padding: 0px;\r\n  margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  padding: 5px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.secondary};\r\n  display: flex;\r\n  align-items: center;\r\n  \r\n  ${({ hide }) => hide && css`\r\n    display: none;\r\n  `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  padding: 10px;\r\n  height: 35px;\r\n  flex: 0 0 35px;\r\n  transition: 0.5s;\r\n`;\r\n\r\nexport const ToggleDoneButton = styled(Button)`\r\n  background-color: hsl(120, 100%, 25%);\r\n\r\n  &:hover {\r\n    background-color: hsl(120, 100%, 30%);\r\n  }\r\n\r\n  &:active {\r\n    background-color: hsl(120, 100%, 35%);\r\n  }\r\n`;\r\n\r\nexport const DeleteButton = styled(Button)`\r\n  background-color: hsl(0, 100%, 50%);\r\n\r\n  &:hover {\r\n    background-color: hsl(0, 100%, 60%);\r\n  }\r\n\r\n  &:active {\r\n    background-color: hsl(0, 100%, 70%);\r\n  }\r\n`;\r\n\r\nexport const Content = styled.p`\r\n  padding: 5px 10px;\r\n  margin: 0px;\r\n  flex-grow: 1;\r\n\r\n  ${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n  `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  transition: 0.5s;\r\n\r\n  &:hover {\r\n    filter: brightness(115%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(130%);\r\n  }\r\n`;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (searchQueryParamName) => {\r\n  const location = useLocation();\r\n  return (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const history = useHistory();\r\n\r\n  return ({ key, value }) => {\r\n    if (value) {\r\n      searchParams.set(key, value);\r\n    } else {\r\n      searchParams.delete(key);\r\n    }\r\n\r\n    history.push(`${location.pathname}?${searchParams.toString()}`);\r\n  }\r\n}","export const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;\r\nexport const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, ToggleDoneButton, DeleteButton, Content, StyledLink } from \"./styled\";\r\nimport doneImage from \"./done.svg\";\r\nimport deleteImage from \"./delete.svg\";\r\nimport { selectTasksState, removeTask, toggleTaskDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport { toTask } from \"../../../../routes\";\r\n\r\nconst TaskList = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n\r\n  const { hideDoneTasks, sortDirection } = useSelector(selectTasksState);\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n\r\n  const dispatch = useDispatch();\r\n  const sortedTasks = [...tasks].sort(\r\n    (a, b) => sortDirection === \"asc\" ? b.content.localeCompare(a.content) : a.content.localeCompare(b.content)\r\n  );\r\n\r\n  return (\r\n    <List>\r\n      {sortedTasks.map(({ id, content, done }) => (\r\n        <Item\r\n          key={id}\r\n          hide={hideDoneTasks && done}\r\n        >\r\n          <ToggleDoneButton onClick={() => dispatch(toggleTaskDone(id))}>\r\n            {done && <img height={15} src={doneImage} alt=\"done\" />}\r\n          </ToggleDoneButton>\r\n          <Content done={done}>\r\n            <StyledLink to={toTask({ id })}>{content}</StyledLink>\r\n          </Content>\r\n          <DeleteButton onClick={() => dispatch(removeTask(id))}>\r\n            <img height={15} src={deleteImage} alt=\"delete\" />\r\n          </DeleteButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default TaskList;","export default \"szukaj\";","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  background-color: white;\r\n  margin-bottom: 10px;\r\n  box-shadow: 0px 0px 2px 2px solid ${({ theme }) => theme.colors.secondary};\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.secondary};\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 10px;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  font-size: 20px;\r\n  margin: 0;\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 20px;\r\n`;","import React from \"react\";\r\nimport { StyledSection, SectionHeader, Title, SectionBody } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, sectionBody }) => (\r\n  <StyledSection>\r\n    <SectionHeader>\r\n      <Title>\r\n        {title}\r\n      </Title>\r\n      {extraHeaderContent}\r\n    </SectionHeader>\r\n    <SectionBody>\r\n      {sectionBody}\r\n    </SectionBody>\r\n  </StyledSection>\r\n)\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const ContainerMain = styled.main`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;","import React from \"react\";\r\nimport { ContainerMain } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <ContainerMain>\r\n    {children}\r\n  </ContainerMain>\r\n)\r\n\r\nexport default Container;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Button from \"../Button\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\n\r\nconst ExampleTasksButton = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectLoading);\r\n  return (\r\n    <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n      {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ExampleTasksButton;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Input from \"../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        value={query || \"\"}\r\n        placeholder=\"Filtruj zadania\"\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\nexport default Search;","import React from \"react\";\nimport Header from \"../../../common/Header\";\nimport Form from \"./Form\";\nimport Buttons from \"./Buttons\";\nimport TaskList from \"./TaskList\";\nimport Section from \"../../../common/Section\";\nimport Container from \"../../../common/Container\";\nimport ExampleTasksButton from \"./ExampleTasksButton\";\nimport Search from \"./Search\";\n\nconst Tasks = () => (\n  <Container>\n    <Header title=\"Lista zadań\" />\n\n    <Section\n      title=\"Dodaj nowe zadanie\"\n      extraHeaderContent={<ExampleTasksButton />}\n      sectionBody={<Form />}\n    />\n\n    <Section\n      title=\"Wyszukiwarka\"\n      sectionBody={<Search />}\n    />\n\n    <Section\n      title=\"Lista zadań\"\n      extraHeaderContent={<Buttons />}\n      sectionBody={<TaskList />}\n    />\n\n  </Container>\n);\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst AuthorPage = () => (\r\n  <Container>\r\n    <Header title=\"O autorze\" />\r\n    <Section\r\n      title=\"Wojciech Knott\"\r\n      sectionBody={\r\n        <>\r\n          Obecnie kończę studia magisterskie na kierunku Automatyka i Robotyka.\r\n          Programowaniem zajmuję się od wielu lat. W tym czasie poznałem podstawy kilku\r\n          języków programowania i technologii, ale to programowanie <strong>aplikacji webowych </strong>\r\n          sprawia mi największą frajdę!\r\n        </>\r\n      }\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default AuthorPage;\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledLink = styled(NavLink).attrs(() => ({ activeClassName }))`\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n  }\r\n  \r\n  color: #fff;\r\n  text-decoration: none;\r\n  text-transform: uppercase;\r\n\r\n  &:hover{\r\n    border-bottom: 1px solid;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  text-align: center;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  list-style-type: none;\r\n  display: inline-block;\r\n  padding: 20px 40px;\r\n`;\r\n\r\nexport const StyledNav = styled.nav`\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n`;","import React from \"react\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\nimport { Item, List, StyledLink, StyledNav } from \"./styled\";\r\n\r\n\r\nconst Navigation = () => (\r\n  <StyledNav>\r\n    <List>\r\n      <Item>\r\n        <StyledLink to={toTasks()}>\r\n          Zadania\r\n        </StyledLink>\r\n      </Item>\r\n      <Item>\r\n        <StyledLink to={toAuthor()}>\r\n          O autorze\r\n        </StyledLink>\r\n      </Item>\r\n    </List>\r\n  </StyledNav>\r\n)\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport Header from \"../../../common/Header\";\r\nimport Section from \"../../../common/Section\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst TaskPage = () => {\r\n  const { id } = useParams();\r\n  const task = useSelector(state => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania!\"}\r\n        sectionBody={task &&\r\n          <>\r\n            <strong>Ukończono:</strong> {task.done ? \"tak\" : \"nie\"}\r\n          </>\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;\r\n","import React from \"react\";\r\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport Navigation from \"./Navigation\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport { toTask, toTasks, toAuthor } from \"./routes\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <Navigation />\r\n    <Switch>\r\n      <Route path={toTask()}>\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path={toTasks()}>\r\n        <TasksPage />\r\n      </Route>\r\n      <Route path={toAuthor()}>\r\n        <AuthorPage />\r\n      </Route>\r\n      <Route>\r\n        <Redirect to={toTasks()} />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/to-do-list-react/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n}","import { takeLatest, call, put, delay, takeEvery, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport {\r\n  fetchExampleTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n  selectTasks\r\n} from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield delay(2000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(fetchExampleTasksSuccess(exampleTasks));\r\n  } catch (error) {\r\n    yield call(alert, \"Coś poszło nie tak! Spróbuj ponownie później.\");\r\n    yield put(fetchExampleTasksError());\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* watchFetchExamlpeTasks() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { watchFetchExamlpeTasks } from \"./features/tasks/tasksSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(watchFetchExamlpeTasks);\r\n\r\nexport default store;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Lato\", sans-serif;\r\n    color: ${({ theme }) => theme.colors.text};\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n  }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { defaultTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={defaultTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const defaultTheme = {\r\n  colors: {\r\n    primary: \"royalblue\",\r\n    secondary: \"#ddd\",\r\n    text: \"#222\",\r\n    background: \"#eee\",\r\n  },\r\n  breakpoints: {\r\n    mobileMax: 767,\r\n  }\r\n};"],"sourceRoot":""}